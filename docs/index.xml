<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zygoo&#39;s Blog</title>
    <link>https://zygoo.github.io/</link>
    <description>Recent content on Zygoo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <lastBuildDate>Wed, 06 Oct 2021 10:18:06 +0800</lastBuildDate><atom:link href="https://zygoo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ginWrapper v1.0: 统一响应格式</title>
      <link>https://zygoo.github.io/posts/golang/context/ginwrapper-response/</link>
      <pubDate>Wed, 06 Oct 2021 10:18:06 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/golang/context/ginwrapper-response/</guid>
      <description>前言 经历过前（web, 客户端，嵌入式，etc）后端联调的同学都知道，指定规范的交互协议是非常重要的。如果没有一定的规范，协议的格式必然是五花</description>
    </item>
    
    <item>
      <title>ginWrapper v1.0: 日志中间件</title>
      <link>https://zygoo.github.io/posts/golang/context/ginwrapper-log/</link>
      <pubDate>Tue, 05 Oct 2021 10:18:06 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/golang/context/ginwrapper-log/</guid>
      <description>前言 日志中间件是一个特别重要的模块，特别是在http的请求中，记录一次完整的request数据可以帮助我们快速定位问题。 在以前的一些工作经历</description>
    </item>
    
    <item>
      <title>RabbitMQ的Channel池</title>
      <link>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq_channel_pool/</link>
      <pubDate>Wed, 15 Sep 2021 12:18:09 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq_channel_pool/</guid>
      <description>Issue &amp;ldquo;channel id space exhausted&amp;rdquo;，部分消息无法进行正常地发布，这便是我们在生产环境中遇到的问题。虽然对connection进行了复用</description>
    </item>
    
    <item>
      <title>RabbitMQ断线重连的正确姿势</title>
      <link>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq_reconnect/</link>
      <pubDate>Mon, 13 Sep 2021 12:18:09 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq_reconnect/</guid>
      <description>背景/问题 在项目中，使用RabbitMQ来做消息的异步分发，但是每隔一段时间都会出现发布订阅的报错， 服务重启后恢复。 问题分析 服务故障之后，首</description>
    </item>
    
    <item>
      <title>Base64编码后出现换行符？</title>
      <link>https://zygoo.github.io/posts/base/base64/</link>
      <pubDate>Tue, 07 Sep 2021 10:18:06 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/base/base64/</guid>
      <description>在开发的过程中，遇到一个很神奇的问题，就是对一段二进制文件进行base64 encode之后，竟然出现了换行符。趁着这个机会，对base64做</description>
    </item>
    
    <item>
      <title>Cgo的进阶使用</title>
      <link>https://zygoo.github.io/posts/golang/cgo/cgo-advanced/</link>
      <pubDate>Mon, 06 Sep 2021 10:18:06 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/golang/cgo/cgo-advanced/</guid>
      <description>cgo在使用c/c++语言的时候一般有三种方式： 直接使用源码 动态链接库 静态链接库 直接使用源码就是在import &amp;ldquo;c&amp;quot;之</description>
    </item>
    
    <item>
      <title>C？Go？Cgo!</title>
      <link>https://zygoo.github.io/posts/golang/cgo/c-go-cgo/</link>
      <pubDate>Sat, 04 Sep 2021 10:18:06 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/golang/cgo/c-go-cgo/</guid>
      <description>cgo的非权威入门指南 为什么要用cgo? 三十年的风云激荡，互联网诞生了众多的编程语言，但是c语言永远是守护金字塔底层的夯土。所谓cgo, 就是</description>
    </item>
    
    <item>
      <title>RabbitMQ进阶使用: 多消费者的worker模式</title>
      <link>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq_worker_mode/</link>
      <pubDate>Sun, 29 Aug 2021 11:18:09 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq_worker_mode/</guid>
      <description>项目中遇到的问题 在现有的项目架构中，我们希望使用RabbitMQ实现多个消费者同时接受同一个队列的消息。使用过RocketMQ的朋友应该都知</description>
    </item>
    
    <item>
      <title>聊一聊RabbitMQ的基本原理</title>
      <link>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq-base-concept/</link>
      <pubDate>Fri, 27 Aug 2021 12:18:09 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/mq/rabbitmq/rabbitmq-base-concept/</guid>
      <description>RabbitMQ的核心概念 生产者: 发送消息的应用 消费者: 接受消息的应用 exchange: 将消息路由到queue的组件 queue: 存储信息的缓存区，消费者对接的是que</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://zygoo.github.io/posts/life/my-first-post/</link>
      <pubDate>Tue, 24 Aug 2021 12:18:09 +0800</pubDate>
      
      <guid>https://zygoo.github.io/posts/life/my-first-post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://zygoo.github.io/about/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zygoo.github.io/about/</guid>
      <description>你好，我是zygoo</description>
    </item>
    
  </channel>
</rss>
